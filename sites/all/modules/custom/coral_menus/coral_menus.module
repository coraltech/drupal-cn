<?php

coral_include('includes', 'inc', 'coral_menus');

define('CORAL_MENUS_PREFIX', 'Coral menus: ');
define('CORAL_MENUS_REGENERATE', FALSE);
 
/**
 * Implementation of hook_init()
 */
function coral_menus_init() {
  coral_menus_run_updates();  
}


/**
 * Core menu initialization! zaap!
 */
// ----------------------------------------------------------------------
// Check the status of the menu definitions as they exist in the
//  repo vs how they exist in the db. Update all relevant db items
//  to reflect the definition.
function coral_menus_run_updates() {
  
  // load the menu state from db (contains links mlid's)
  $orig_state = $current_state = variable_get('coral_menus_menu_state', array());

  $path = drupal_get_path('module', 'coral_menus');  // This module path 
  $menus = coral_menus_read_dir($path.'/includes');  // Load menus + links
  
  //dpm('orig:');
  //dpm($orig_state);
  
  // Are these menus in the db?
  foreach ($menus as $i => $menu) {
    $mname = str_replace('.inc', '', $menus[$i]);    // menu name
    $mfunc = 'coral_menus_'.$mname.'_menu_loader';   // menu func
    $lfunc = 'coral_menus_'.$mname.'_links_loader';  // menu links func
    
    // Development regeneration - enable above
    coral_menu_regenerate($mname, $mfunc, $current_state, CORAL_MENUS_REGENERATE); // Regenerate if necc.
    
    $in_state = (!empty($current_state[$mname])) ? $current_state[$mname] : FALSE; // load from db variable
    $in_db    = menu_load($mname); // menu as it is from the db
    
    // --- Syncronize
    // Syncronize data objects from db and state
    if (!($in_state && $in_db)) { // Are we missing anything?
      
      // Load to state - note we need links to have the id = machine name to do this!
      if($in_db && !$in_state) {
        
        // Load the db into state
        coral_menus_load_to_state($mfunc, $current_state);
      }
      else { /*dpm('Menus not in state or db!');*/ } // Menus are not in state or db!  
    } 
    else { /*dpm('Menus in both state and db.');*/ } // Menus in both db and state...nothing to do here.
    
    // --- Init
    // Initialize and create new menu + links
    //  if they didn't already exist.
    if (!$in_db) { // not in db yet

      // Check if the menu function is callable
      if (function_exists($mfunc)) { $m = $mfunc(); // Load definition
        
        // If we have a defined menu, proceed
        if (!empty($m)) { coral_menus_menu_save($m, $current_state); // Save new menu

          // Do we have any links to add?
          if (function_exists($lfunc)) { $l = $lfunc(); // Load links
            
            // Save each link - it's a miracle!
            foreach ($l as $link_name => $link) {

              // will write the mlid back to the file if it does not already exist there
              coral_menus_link_save($m, $link_name, $link, $current_state);
            }
          }
        } 
      }
    }
    
    // menu already in the db
    else {

      // Check if the menu function is callable
      if (function_exists($mfunc)) { $m = $mfunc(); // call this menu.
        
        // the menu is defined in code
        if (!empty($m)) {
           
          // If we have a defined menu, proceed
          if (coral_menus_menus_eq($m)) { // Menus are equal; check links

            // Check links
            coral_menus_manage_links($lfunc, $m, $current_state);
          }
          else { // Menus differ
  
            // Update the menu in the state according to the definition
            coral_menus_menu_save($m, $current_state);
            
            // Check links
            coral_menus_manage_links($lfunc, $m, $current_state);
          }
        }
      }
    }
  }

  //Did the states change on this process?
  $orig_state_sha      = sha1(serialize($orig_state));
  $current_state_sha   = sha1(serialize($current_state));
  if ($orig_state_sha != $current_state_sha) {
    variable_set('coral_menus_menu_state', $current_state);  
  }
}


/**
 * Helper functions
 */
// --- Manages updating already created link sets
//  Needs to loop through all the links in this menu
//  and check if the state needs updating (file change)
function coral_menus_manage_links($lfunc, $menu, &$state) {
  $links = $lfunc();
  $updated = 0;
  
  // Cycle through the links and update the necc. fields
  foreach ($links as $name => $link) {

    // Holds this link's changes
    $changes = array();  

    // Do we need to update the link in the state and db?
    if (!coral_menus_link_eq($name, $link, $menu, $state, $changes)) {

      // Loop through the changeset returned by the equality measurer
      foreach ($changes as $linkid => $changeset) {
        
        // Update the state and db with new values from file.
        foreach($changeset as $key => $change) {
          $state[$menu['menu_name']]['links'][$linkid][$key] = $change;
          menu_link_save($state[$menu['menu_name']]['links'][$linkid]);
        }

        $updated++;
      }
    }
  }
  if ($updated) { 
    watchdog('Coral Menus', 'Updated '.format_plural($updated, '1 link', '@count links'), NULL, WATCHDOG_NOTICE);
  }
} 


// --- Save a menu now! Tomorrow could be too late
function coral_menus_menu_save($menu, &$state, $to_db = TRUE, $to_state = TRUE) {

  // Save to the db
  if ($to_db) menu_save($menu);

  // add this menu's distinctiveness to it's own
  if ($to_state) $state[$menu['menu_name']]['menu'] = $menu;
  
  watchdog('Coral Menus', 'Updated menu '.$menu['menu_name'], NULL, WATCHDOG_NOTICE);
} 


// --- Saves one menu link
function coral_menus_link_save($menu, $name, $link, &$state, $to_db = TRUE, $to_state = TRUE) {

  // Is the module defined?
  $link['module'] = (!empty($link['module'])) ? $link['module'] : 'coral_menus';
  
  // Save the link to the db
  if ($to_db) menu_link_save($link);
  
  // Save the link to state
  if ($to_state) $state[$menu['menu_name']]['links'][$name] = $link;
}

 
// --- Check if a menu definition is eq to the instance in the db
function coral_menus_menus_eq($m) {
  $mdb = menu_load($m['menu_name']); // load this menu from db too  
  $compm = sha1(serialize($m));      // get the sha1 hash of this menu definition
  $compmdb = sha1(serialize($mdb));  // get the sha1 hash of this menu row
  if ($compm === $compmdb) return TRUE; return FALSE;
}


// --- Test the equality of the current state vs the state in db
function coral_menus_link_eq($link_name, $link_def, $menu, $state, &$changes) {
  $eq = TRUE; // Help determine if we need to regenerate this link
  $check_keys = array_keys($link_def); // The keys that we have defined in the file definition
  
  // Go through the defined keys
  foreach($check_keys as $key) {
    $def_hash   = sha1(serialize($link_def[$key])); // defined has values
    $state_hash = ''; // Empty container for the state hash
    if (!empty($state[$menu['menu_name']]['links'][$link_name][$key])) {
      $state_hash = sha1(serialize($state[$menu['menu_name']]['links'][$link_name][$key])); // state hash value
    }
    if ($def_hash != $state_hash) {
      $changes[$link_name] = array($key => $link_def[$key]);  
      $eq = FALSE; // who moved my cheese?!
    }
  }
  return $eq;
}


// --- Push to state variable if it is lost
function coral_menus_load_to_state($mfunc, &$state) {

  // Call up the menu definition  
  $menu = $mfunc();

  // Save the menu to state  
  coral_menus_menu_save($menu, $state, FALSE, TRUE);
  $links = menu_load_links($menu['menu_name']); // load the menu links

  // Process the links one by one
  foreach ($links as $link) {
    if (!empty($link['options']['attributes']['id'])) {
      $name = $link['options']['attributes']['id'];
      coral_menus_link_save($menu, $name, $link, $state, FALSE, TRUE);
    }
  }
}

// --- Read in the files and directory structure
function coral_menus_read_dir($dir) {
  $result = array(); 
  $cdir = scandir($dir); 
  foreach ($cdir as $key => $value) {
    if (!in_array($value,array(".",".."))) {
      if (is_dir($dir . DIRECTORY_SEPARATOR . $value)) 
        $result[$value] = coral_menus_read_dir($dir . DIRECTORY_SEPARATOR . $value); 
      else $result[]  = $value; 
  }} return $result;
}


// --- Optionaly clear all menus and regenerate from scratch
function coral_menu_regenerate($menu, $mfunc, &$current_state, $del_storage = FALSE) {
  if (CORAL_MENUS_REGENERATE) {
    
    // call the menu definition    
    $m_def = $mfunc();
    
    // Only delete if it has definition
    if ($m_def) menu_delete($m_def);
    
    // Delete the storage variable
    if ($del_storage) {
      $current_state = array();
      variable_del('coral_menus_menu_state');
    }
  }
}

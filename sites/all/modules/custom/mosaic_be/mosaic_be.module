<?php

// Include includes
coral_include(array('includes'), 'inc', array('module' => 'mosaic_be'));

// Check panelizer to see if it is adding any content types we should
//  be aware of.
function mosaic_be_panelizer_pre_render_alter($panelizer, $display, $entity) {

  $view_mode = $panelizer->view_mode;
  
  // Nodes
  if (!empty($entity->nid) && is_numeric($entity->nid)) {
    // Load css and js files as needed by the theme
    //  note files are loaded w theme level settings._mosiac_be_node_load_by_nid($entity);              // Load by node id
    _mosiac_be_node_load_by_nid($entity);              // Load by node id
    _mosiac_be_node_load_by_type($entity);             // Load by node type
    _mosaic_be_node_load_by_mode($entity, $view_mode); // Load by view modes
    _mosaic_be_node_load_by_fe_attach($entity);        // Load by fe_attach field (added on node create form)
  
  
  }
}


// Some stuff doesnt go through panelizer that could be caught here.
function mosaic_be_init() {
  $item = menu_get_item();
  if (isset($item['page_arguments'])) {
    $obj = array_shift($item['page_arguments']);
  
    // It's a node! Congratulations!
    if (is_object($obj) && isset($obj->nid) && $obj->nid > 0) {
      // Load css and js files as needed by the theme
      //  note files are loaded w theme level settings._mosiac_be_node_load_by_nid($entity);              // Load by node id
      _mosiac_be_node_load_by_nid($obj);              // Load by node id
      _mosiac_be_node_load_by_type($obj);             // Load by node type
      _mosaic_be_node_load_by_fe_attach($obj);        // Load by fe_attach field (added on node create form)
      _mosaic_be_comment_load_by_node($obj);
    }
  }
}

function mosaic_be_anchor_identifier($toc, $h) {
  if (isset($h->title) && isset($toc['header'])) {
    $toc_header = $toc['header'];
    $title = $h->title;
    $id = $title;
  }
  $allowed_chars = '';
  if (empty($toc_header['id_strip']['dashes'])) {
    $allowed_chars = '-';
  }
  $allowed_chars .= 'A-Za-z';
  if (empty($toc_header['id_strip']['digits'])) {
    $allowed_chars .= '0-9';
  }
  if (empty($toc_header['id_strip']['periods'])) {
    $allowed_chars .= '.';
  }
  if (empty($toc_header['id_strip']['underscores'])) {
    $allowed_chars .= '_';
  }
  if (empty($toc_header['id_strip']['colons'])) {
    $allowed_chars .= ':';
  }
  $id = preg_replace(
    array(
      '/&nbsp;|\s/',
      '/\'/',
      '/&mdash;/',
      '/&ndash;/',
      '/&amp;/',
      '/&[a-z]+;/',
      '/[^' . $allowed_chars . ']/',
      '/^[-0-9._:]+/',
      '/__+/',
    ),
    array(
      '_',     // &nbsp; and spaces
      '-',     // apostrophe, so it makes things slightly more readable
      '--',    // &mdash;
      '--',    // &ndash;
      'and',   // &amp;
      '',      // any other entity
      '',      // any character that is invalid as an ID name
      '',      // any digits at the start of the name
      '_',     // reduce multiple underscores to just one
    ),
    strip_tags($title)
  );
  if (!$id) {
    // no identifier (i.e. title is composed exclusively of digits, entities, etc.)
    $id = $toc_header['id_prefix'] . $toc_header['id_sep'] . $toc_header['idx']++;
  }
  else {
    $id .= $toc_header['id_sep'] . rand(0,1000);
  }
  
  $h->attrs = ' class="toc-section" id="'.$id.'"';
  $h->ident = $id;
  return $h;
}






